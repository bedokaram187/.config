-- -- custom keymaps
-- vim.api.nvim_create_autocmd("LspAttach", {
-- 	callback = function(ev)
-- 		local opts = { buffer = ev.buf }
--
-- 		vim.keymap.set("n", "m", "<C-x><C-o>", opts)
-- 		vim.keymap.set("n", "gd", "<cmd>lua vim.lsp.buf.definition()<cr>", opts)
-- 		vim.keymap.set({ "n", "x" }, "gq", "<cmd>lua vim.lsp.buf.format({async = true})<cr>", opts)
-- 		vim.keymap.set("n", "grt", "<cmd>lua vim.lsp.buf.type_definition()<cr>", opts)
-- 		vim.keymap.set("n", "grd", "<cmd>lua vim.lsp.buf.declaration()<cr>", opts)
-- 	end,
-- })

-- completion
-- vim.api.nvim_create_autocmd("LspAttach", {
-- 	callback = function(args)
-- 		local client = vim.lsp.get_client_by_id(args.data.client_id)
--
-- 		if client:supports_method("textDocument/completion") then
-- 			vim.lsp.completion.enable(true, client.id, args.buf, { autotrigger = true })
-- 		end
-- 	end,
-- })

-- format on save
-- don't use it while using conform.nvim
-- vim.api.nvim_create_autocmd('LspAttach', {
--   callback = function(args)
--     local client = vim.lsp.get_client_by_id(args.data.client_id)
--
--     if client:supports_method('textDocument/formatting') then
--       vim.api.nvim_create_autocmd('BufWritePre', {
--         buffer = args.buf,
--         callback = function()
--           vim.lsp.buf.format({ bufnr = args.buf, id = client.id })
--         end,
--       })
--     end
--   end,
-- })

-- highlight word
-- vim.api.nvim_create_autocmd("LspAttach", {
-- 	callback = function(args)
-- 		local client = vim.lsp.get_client_by_id(args.data.client_id)
--
-- 		if client:supports_method("textDocument/documentHighlight") then
-- 			local autocmd = vim.api.nvim_create_autocmd
-- 			local augroup = vim.api.nvim_create_augroup("lsp_highlight", { clear = false })
--
-- 			vim.api.nvim_clear_autocmds({ buffer = bufnr, group = augroup })
--
-- 			autocmd({ "CursorHold" }, {
-- 				group = augroup,
-- 				buffer = args.buf,
-- 				callback = vim.lsp.buf.document_highlight,
-- 			})
--
-- 			autocmd({ "CursorMoved" }, {
-- 				group = augroup,
-- 				buffer = args.buf,
-- 				callback = vim.lsp.buf.clear_references,
-- 			})
-- 		end
-- 	end,
-- })

-- inlay hint
-- vim.api.nvim_create_autocmd("LspAttach", {
-- 	callback = function(args)
-- 		local client = vim.lsp.get_client_by_id(args.data.client_id)
--
-- 		if client:supports_method("textDocument/inlayHint") then
-- 			vim.lsp.inlay_hint.enable(true, { bufnr = args.buf })
-- 		end
-- 	end,
-- })

-- Show errors and warnings in a floating window
-- first way
-- vim.api.nvim_create_autocmd("CursorHold", {
-- 	callback = function()
-- 		local _, win = vim.diagnostic.open_float(nil, { focusable = false, source = "if_many" })
--
-- 		if not win then
-- 			return
-- 		end
--
-- 		local cfg = vim.api.nvim_win_get_config(win)
--
-- 		cfg.anchor = "SE" -- bottom right
-- 		cfg.row = vim.o.lines - 2 -- a bit above the bottom
-- 		cfg.col = vim.o.columns - 2 -- a bit to the left of the right edge
-- 		cfg.width = math.min(cfg.width or 999, math.floor(vim.o.columns * 0.6))
-- 		cfg.height = math.min(cfg.height or 999, math.floor(vim.o.lines * 0.4))
--
-- 		vim.api.nvim_win_set_config(win, cfg)
-- 	end,
-- })

-- if you want to make this message appear with a delay:
-- local timer = vim.uv.new_timer()
-- local delay = 750
-- vim.api.nvim_create_autocmd({ 'CursorMoved', 'DiagnosticChanged' }, {
--    callback = function()
--      -- debounce
--      timer:start(delay, 0, function()
--        timer:stop()
--        vim.schedule(function()
--          -- same content of the CursorHold callback
--          -- the function above
--        end)
--      end)
--    end,
--  })

-- second way
-- vim.diagnostic.config({
-- 	virtual_text = {
-- 		enabled = true,
-- 		prefix = function(diagnostic)
-- 			if diagnostic.severity == vim.diagnostic.severity.ERROR then
-- 				return "ðŸ­°Ã— "
-- 			elseif diagnostic.severity == vim.diagnostic.severity.WARN then
-- 				return "ðŸ­°â–² "
-- 			else
-- 				return "ðŸ­°â€¢ "
-- 			end
-- 		end,
-- 		suffix = "ðŸ­µ",
-- 	},
-- 	underline = true,
-- 	signs = {
-- 		text = {
-- 			[vim.diagnostic.severity.ERROR] = " Ã—",
-- 			[vim.diagnostic.severity.WARN] = " â–²",
-- 			[vim.diagnostic.severity.HINT] = " â€¢",
-- 			[vim.diagnostic.severity.INFO] = " â€¢",
-- 		},
-- 	},
-- })

-- require("lspconfig").lua_ls.setup({
-- 	settings = {
-- 		Lua = {
-- 			diagnostics = {
-- 				globals = { "vim" },
-- 			},
-- 		},
-- 	},
-- })
